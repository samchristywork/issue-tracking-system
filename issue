#!/bin/bash

filename="./issue.its"

function usage() {
  echo "Usage: $0 <command>"
  echo "Commands:"
  echo "  add - add a new issue"
  echo "  show - show all issues"
  echo "  edit - edit the issue file"
  echo "  update - update the status of an issue"
  echo "  summary - show a summary of the issues"
  echo "  graph - use graphviz to show the issues"
  echo "  help - show this help"
}

function add_issue() {
  if [ ! -f "$filename" ]; then
    echo "This is a new issue file, would you like to apply a template?"
    select yn in "Yes" "No"; do
      case $yn in
        Yes)
          echo "Which template would you like to use?"
          select template in "default" "empty"; do
            case $template in
              default)
                cp "$HOME/.config/issue/issue.its" "$filename"
                break
                ;;
              empty)
                touch "$filename"
                break
                ;;
              *)
                echo "Unknown template: $template"
                exit 1
                ;;
            esac
          done
          break
          ;;
        No)
          touch "$filename"
          break
          ;;
        *)
          echo "Unknown option: $yn"
          exit 1
          ;;
      esac
    done
  fi

  DATE=$(date +%Y-%m-%d)
  ID=$(awk -F'\t' '
  BEGIN {
    max = 0
  }
  // {
    if ($1 > max) {
      max = $1
    }
  }
  END {
    print max + 1
  }' "$filename")

  PARENT=$(
    fzf --prompt="Parent: " < "$filename" | \
      awk -F'\t' '{print $1}'
  )

  if [ -z "$PARENT" ]; then
    PARENT="0"
  fi

  (
  echo "ID: $ID"
  echo "Status: todo"
  echo "Created: $DATE"
  echo "Parent: $PARENT"
  echo "Name: "
  ) > /tmp/issue.txt

  $EDITOR /tmp/issue.txt

  if [ -s /tmp/issue.txt ]; then
    sed 's/.\+: //g' < /tmp/issue.txt | \
      tr '\n' '\t' | \
      sed 's/\t$/\n/g' >> "$filename"
          echo "Added to $filename"
        else
          echo "No changes made"
  fi
}

case $1 in
  "add")
    add_issue
    ;;
  "show")
    (
    printf "ID\tStatus\tCreated\tParent\tName\n"
    cat "$filename"
    ) | column -t -s $'\t'
    ;;
  "edit")
    "$EDITOR" "$filename"
    ;;
  "update")
    ID=$(
      fzf --prompt="ID: " < "$filename" | \
        awk -F'\t' '{print $1}'
    )

    if [ -z "$ID" ]; then
      echo "No ID selected"
      exit 1
    fi

    STATUS=$(
    echo -e "todo\ndoing\ndone" | \
      fzf --prompt="Status: "
    )

    if [ -z "$STATUS" ]; then
      echo "No status selected"
      exit 1
    fi

    awk -F'\t' -v id="$ID" -v status="$STATUS" '
    BEGIN {
      OFS = "\t"
    }
    // {
      if ($1 == id) {
        $2 = status
      }
      print $0
    }' "$filename" > /tmp/issue.txt

    mv /tmp/issue.txt "$filename"
    ;;
  "summary")
    awk -F'\t' '
    BEGIN {
      todo = 0
      doing = 0
      done = 0
    }
    // {
      if ($2 == "todo") {
        todo += 1
      } else if ($2 == "doing") {
        doing += 1
      } else if ($2 == "done") {
        done += 1
      }
    }
    END {
      print "todo: " todo
      print "doing: " doing
      print "done: " done
    }' "$filename"
    ;;
  "graph")
    (
    echo "digraph {"
    echo "  rankdir=LR"
    echo "  node [shape=box]"
    awk -F'\t' '
    // {
      node_color=""
      if ($2 == "done") {
        node_color="green"
      } else if ($2 == "todo") {
        node_color="red"
      } else if ($2 == "doing") {
        node_color="yellow"
      }
      if ($4 == 0) {
        print "  \"" $1 "\" [label=\"" $5 "\", color=\"" node_color "\"]"
      } else {
        print "  \"" $1 "\" [label=\"" $5 "\", color=\"" node_color "\"]"
        print "  \"" $4 "\" -> \"" $1 "\""
      }
    }' "$filename"
    echo "}"
    ) | dot -Tpng | feh -
    ;;
  "help")
    usage
    ;;
  "" )
    "$0" add
    ;;
  *)
    echo "Unknown command: $1"
    usage
    exit 1
    ;;
esac
